{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Polyphony","text":"<p>This documentation currently hosts information about polyproto; an advanced, secure and scalable protocol for federated chat services.</p> <p>The core of the protocol lies in the polyproto-core specification and in the federation API routes, which are used to negotiate and establish connections between foreign servers and clients.</p> <p>The polyproto-core federation protocol can be used for any kind of online service, enabling you to bring federated identities to your federated social network, federated chat service or federated $ANYTHING.</p>"},{"location":"#glossary","title":"Glossary","text":"<ul> <li>Client - A device or session that is used by a user or bot to connect to a server.</li> <li>Federation token - A one-time use token generated by a user's home server, which is used to authorize/identify a user on a foreign server.</li> <li>Foreign server - A polyproto-core server that a user is not registered on - essentially a third party.</li> <li>Foreign user - A user registered on a foreign server.</li> <li>Home server - The server that a user is registered on. Any polyproto-core compliant server hosted on the same domain is also considered a home server.</li> <li>Identity Key - A key pair which represents a user's identity for a given session. It is used to sign messages and to encrypt messages for the user.</li> <li>polyproto - The combination of the polyproto-core and polyproto-chat protocols and APIs.</li> <li>polyproto-chat - The chat-API used by polyproto. It defines the routes and capabilities of the chat-API used by polyproto.</li> <li>polyproto-core - The core federation protocol and APIs of polyproto, enabling identification and authorization on 'foreign' servers. It is independent of the chat-API used.</li> <li>User - An entity represented by a federation ID, registered on a home server.</li> </ul>"},{"location":"APIs/","title":"APIs","text":"<p>Lorem ipsum</p> <p>TODO: Add content</p>"},{"location":"APIs/Chat/","title":"Index","text":"<p>TODO</p>"},{"location":"APIs/Core/","title":"polyproto-core","text":"<p>This folder contains the API documentation for polyproto-core.</p>"},{"location":"APIs/Core/errors/","title":"Errors","text":"<p>TODO</p>"},{"location":"APIs/Core/rate-limits/","title":"Rate limits","text":"<p>TODO</p>"},{"location":"APIs/Core/types/","title":"Types","text":"<p>Type definitions required for using the polyproto-core API.</p>"},{"location":"APIs/Core/types/#snowflake","title":"Snowflake","text":"<p>Snowflakes are really hella cool TODO</p>"},{"location":"APIs/Core/types/#federation-id","title":"Federation ID","text":""},{"location":"APIs/Core/types/#federation-token","title":"Federation Token","text":"<p>A federation token is a json object blah blah blah TODO</p>"},{"location":"APIs/Core/types/#public-user-profile","title":"Public User Profile","text":"<p>A public user profile contains the following fields:</p> Text Only<pre><code>pub id: Snowflake,\npub username: Option&lt;String&gt;,\npub discriminator: Option&lt;String&gt;,\npub avatar: Option&lt;String&gt;,\npub accent_color: Option&lt;u8&gt;,\npub banner: Option&lt;String&gt;,\npub theme_colors: Option&lt;Vec&lt;u8&gt;&gt;,\npub pronouns: Option&lt;String&gt;,\npub bot: Option&lt;bool&gt;,\npub bio: Option&lt;String&gt;,\npub premium_type: Option&lt;u8&gt;,\npub premium_since: Option&lt;DateTime&lt;Utc&gt;&gt;,\npub public_flags: Option&lt;u32&gt;,\n</code></pre> Name Type Description id Snowflake The users ID on their home server fid Federation ID The users' globally unique identifier username (optional) String The users' display name avatar (optional) String The users' avatar hash"},{"location":"APIs/Core/Client-Foreign%20Server%20API/","title":"Client-Foreign Server API Routes","text":"<p>All API endpoints needed for Client-Home Server communication. A \"Client\" in this context is a user/bot client, an authenticated user or another server. This Page only includes routes, for which a client does not need a \"Client-Home Server relationship\" with the server. If you'd like to see the routes, which require such a relationship, see the Client-Home Server API documentation</p>"},{"location":"APIs/Core/Client-Foreign%20Server%20API/#authorization","title":"Authorization","text":"<p>Bearer token, unless specified otherwise.</p>"},{"location":"APIs/Core/Client-Foreign%20Server%20API/#errors","title":"Errors","text":"<p>The errors listed below are not exhaustive, and only include the most common errors associated with an endpoint. For rate limit errors, see the Rate Limits documentation.</p>"},{"location":"APIs/Core/Client-Foreign%20Server%20API/#federation-tokens","title":"Federation Tokens","text":"<p>Routes concerning the creation, deletion and management of federation tokens.</p>"},{"location":"APIs/Core/Client-Foreign%20Server%20API/#get-token-generation-status","title":"GET Token Generation Status","text":"<p><code>/p2core/token/status</code></p>"},{"location":"APIs/Core/Client-Foreign%20Server%20API/#request","title":"Request","text":""},{"location":"APIs/Core/Client-Foreign%20Server%20API/#body","title":"Body","text":"<p>This request has no body.</p>"},{"location":"APIs/Core/Client-Foreign%20Server%20API/#curl","title":"cURL","text":"Bash<pre><code>curl -X GET \"https://example.com/p2core/token/status\"\n</code></pre>"},{"location":"APIs/Core/Client-Foreign%20Server%20API/#response","title":"Response","text":"200 OK"},{"location":"APIs/Core/Client-Foreign%20Server%20API/#body_1","title":"Body","text":"Name Type Description <code>enabled</code> boolean Whether this server currently accepts new federation token generation requests JSON<pre><code>{\n    \"enabled\": true\n}\n</code></pre>"},{"location":"APIs/Core/Client-Foreign%20Server%20API/#federated-identity","title":"Federated Identity","text":"<p>Routes concerning federated identities, such as authentication and key management.</p>"},{"location":"APIs/Core/Client-Foreign%20Server%20API/#post-generate-session-token","title":"POST Generate Session Token","text":"<p><code>/p2core/session/auth</code></p>"},{"location":"APIs/Core/Client-Foreign%20Server%20API/#request_1","title":"Request","text":""},{"location":"APIs/Core/Client-Foreign%20Server%20API/#body_2","title":"Body","text":"Name Type Description <code>federation_token</code> Federation Token A valid federation token to authenticate with on this server. <code>id_cert</code> ID-Cert, Binary Data The client's ID-Cert. <code>key_packages</code> JSON-Array of KeyPackage One or more KeyPackages <code>key_package_lr</code> KeyPackage A \"Last-Resort\" KeyPackage JSON<pre><code>{\n    \"federation_token\": {...},\n    \"id_cert\": [...],\n    \"key_packages\": [{...}, {...}],\n    \"key_package_lr\": {...}\n}\n</code></pre>"},{"location":"APIs/Core/Client-Foreign%20Server%20API/#response_1","title":"Response","text":"201 Created"},{"location":"APIs/Core/Client-Foreign%20Server%20API/#body_3","title":"Body","text":"Name Type Description <code>session_token</code> String The generated session token <code>extra</code> JSON Object Implementation-specific data which might be sent along the session token, when the authentication succeeds. Read the documentation of the specific polyproto-core implementation to see if this field should be expected, and if so, what its contents are. JSON<pre><code>{\n    \"session_token\": \"eYjd34GsAdfgAd.4332hfiwodm3lo...\",\n    \"extra\": {...}\n}\n</code></pre>"},{"location":"APIs/Core/Client-Foreign%20Server%20API/#put-rotate-server-identity-key","title":"PUT Rotate Server Identity Key","text":"<p><code>/p2core/key/server</code></p>"},{"location":"APIs/Core/Client-Foreign%20Server%20API/#request_2","title":"Request","text":""},{"location":"APIs/Core/Client-Foreign%20Server%20API/#body_4","title":"Body","text":"<p>This request has no body.</p>"},{"location":"APIs/Core/Client-Foreign%20Server%20API/#response_2","title":"Response","text":"200 OK"},{"location":"APIs/Core/Client-Foreign%20Server%20API/#body_5","title":"Body","text":"Type Description String The servers' new public identity key, in ASCII-representation. JSON<pre><code>\"-----BEGIN PGP PUBLIC KEY BLOCK-----\nmQINBGSDs58BEADCXP1ArorBtOvGnQdAD26gsOMasyLMqnJyUp8XXCdmTx5+gREs\nvtItmjIshHU6CLUyTwO2IqIb2Fds+AmDsdM1Qx/vM0fVtPAS13T3Tu9rknldJvvN\nGyT3urrgvZ1leqQnwvuHd3WMdtgQ29lc7F/XaP4v2RIlqUiV+bnBoe/6LL7HXTaW\nzy2oKXr/odOD4+476J5APxxXCWVLXr3qfAXmSBQERznYuuRmhyL...\n-----END PGP PUBLIC KEY BLOCK-----\"\n</code></pre>"},{"location":"APIs/Core/Client-Foreign%20Server%20API/#get-server-id-cert","title":"GET Server ID-Cert","text":"<p><code>/p2core/key/server</code></p>"},{"location":"APIs/Core/Client-Foreign%20Server%20API/#request_3","title":"Request","text":""},{"location":"APIs/Core/Client-Foreign%20Server%20API/#body_6","title":"Body","text":"Name Type Description <code>timestamp</code> String UNIX-Timestamp. If specified, the server will return the ID-Cert which it had at the specified time JSON<pre><code>{\n    \"timestamp\": \"1620000000\"\n}\n</code></pre>"},{"location":"APIs/Core/Client-Foreign%20Server%20API/#response_3","title":"Response","text":"200 OK"},{"location":"APIs/Core/Client-Foreign%20Server%20API/#body_7","title":"Body","text":"Type Description ID-Cert, Binary The servers' public identity certificate, in binary format. JSON<pre><code>[...]\n</code></pre>"},{"location":"APIs/Core/Client-Foreign%20Server%20API/#get-user-id-certs","title":"GET User ID-Cert(s)","text":"<p><code>/p2core/key/user/:user_id</code></p>"},{"location":"APIs/Core/Client-Foreign%20Server%20API/#request_4","title":"Request","text":""},{"location":"APIs/Core/Client-Foreign%20Server%20API/#parameters","title":"Parameters","text":"Name Type Description <code>user_id</code> Snowflake The ID of the user whose ID-Cert(s) should be returned."},{"location":"APIs/Core/Client-Foreign%20Server%20API/#body_8","title":"Body","text":"Name Type Description <code>timestamp</code> String UNIX-Timestamp. If specified, the server will return the ID-Cert(s) which the user had at the specified time JSON<pre><code>{\n    \"timestamp\": \"1620000000\"\n}\n</code></pre>"},{"location":"APIs/Core/Client-Foreign%20Server%20API/#response_4","title":"Response","text":"200 OK"},{"location":"APIs/Core/Client-Foreign%20Server%20API/#body_9","title":"Body","text":"Type Description JSON-Array of ID-Cert(s), Binary The user's public identity certificate(s), in binary format. JSON<pre><code>[...]\n</code></pre>"},{"location":"APIs/Core/Client-Foreign%20Server%20API/#get-keypackages","title":"GET KeyPackage(s)","text":"<p><code>/p2core/keypackage/:user_id</code></p>"},{"location":"APIs/Core/Client-Foreign%20Server%20API/#request_5","title":"Request","text":""},{"location":"APIs/Core/Client-Foreign%20Server%20API/#parameters_1","title":"Parameters","text":"Name Type Description <code>user_id</code> Snowflake The ID of the user whose KeyPackage(s) should be returned."},{"location":"APIs/Core/Client-Foreign%20Server%20API/#body_10","title":"Body","text":"<p>This request has no body.</p>"},{"location":"APIs/Core/Client-Foreign%20Server%20API/#response_5","title":"Response","text":"200 OK"},{"location":"APIs/Core/Client-Foreign%20Server%20API/#body_11","title":"Body","text":"Type Description JSON-Array of KeyPackage(s), Binary The user's KeyPackage(s), in binary format. Each entry in the array corresponds to a different client the requested user is authenticated on. JSON<pre><code>[...]\n</code></pre>"},{"location":"APIs/Core/Client-Foreign%20Server%20API/#post-rotate-session-id-cert","title":"POST Rotate session ID-Cert","text":"<p><code>/p2core/key/user/@me</code></p> <p>Info</p> <p>This endpoint has a twin, for when the server the client is interacting with, is its home server. See Client-Home Server API/Rotate session ID-Cert for more information.</p>"},{"location":"APIs/Core/Client-Foreign%20Server%20API/#request_6","title":"Request","text":""},{"location":"APIs/Core/Client-Foreign%20Server%20API/#body_12","title":"Body","text":"Type Description ID-Cert, Binary The new public identity certificate, in binary format. JSON<pre><code>[...]\n</code></pre>"},{"location":"APIs/Core/Client-Foreign%20Server%20API/#response_6","title":"Response","text":"201 Created"},{"location":"APIs/Core/Client-Foreign%20Server%20API/#body_13","title":"Body","text":"<p>This response has no body.</p>"},{"location":"APIs/Core/Client-Foreign%20Server%20API/#glossary","title":"Glossary","text":"<ul> <li>Client - A device or session that is used by a user or bot to connect to a server.</li> <li>Federation token - A one-time use token generated by a user's home server, which is used to authorize/identify a user on a foreign server.</li> <li>Foreign server - A polyproto-core server that a user is not registered on - essentially a third party.</li> <li>Foreign user - A user registered on a foreign server.</li> <li>Home server - The server that a user is registered on. Any polyproto-core compliant server hosted on the same domain is also considered a home server.</li> <li>Identity Key - A key pair which represents a user's identity for a given session. It is used to sign messages and to encrypt messages for the user.</li> <li>polyproto - The combination of the polyproto-core and polyproto-chat protocols and APIs.</li> <li>polyproto-chat - The chat-API used by polyproto. It defines the routes and capabilities of the chat-API used by polyproto.</li> <li>polyproto-core - The core federation protocol and APIs of polyproto, enabling identification and authorization on 'foreign' servers. It is independent of the chat-API used.</li> <li>User - An entity represented by a federation ID, registered on a home server.</li> </ul>"},{"location":"APIs/Core/Client-Home%20Server%20API/","title":"Client-Home Server API Routes","text":"<p>All API endpoints needed for Client-Home Server communication. A \"Client\" in this context is a user or bot client. This Page only includes routes which a client can request from its home server. For routes which can also be accessed from a foreign server, or with no authentication at all, see the Client-Foreign Server API documentation</p>"},{"location":"APIs/Core/Client-Home%20Server%20API/#authorization","title":"Authorization","text":"<p>Bearer token, unless specified otherwise.</p>"},{"location":"APIs/Core/Client-Home%20Server%20API/#errors","title":"Errors","text":"<p>The errors listed below are not exhaustive, and only include the most common errors associated with an endpoint. For rate limit errors, see the Rate Limits documentation.</p>"},{"location":"APIs/Core/Client-Home%20Server%20API/#federation-tokens","title":"Federation tokens","text":"<p>Routes concerning the creation, deletion and management of federation tokens.</p>"},{"location":"APIs/Core/Client-Home%20Server%20API/#post-generate-federation-token","title":"POST Generate Federation Token","text":"<p><code>/p2core/token</code></p>"},{"location":"APIs/Core/Client-Home%20Server%20API/#request","title":"Request","text":""},{"location":"APIs/Core/Client-Home%20Server%20API/#body","title":"Body","text":"Name Type Description <code>server</code> String The URL of the server the token should be generated for JSON<pre><code>{\n    \"server\", \"https://someserver.example.com\"\n}\n</code></pre>"},{"location":"APIs/Core/Client-Home%20Server%20API/#curl","title":"cURL","text":"Bash<pre><code>curl -X POST https://example.com/p2core/token \\\n-H 'Authorization: Bearer &lt;your_token&gt;' \\\n-H 'Content-Type: application/json' \\\n-d '{\"server\":\"https://someserver.example.com\"}'\n</code></pre>"},{"location":"APIs/Core/Client-Home%20Server%20API/#response","title":"Response","text":"201 Created"},{"location":"APIs/Core/Client-Home%20Server%20API/#body_1","title":"Body","text":"<p>The generated Federation Token</p> JSON<pre><code>\"aC73Bd8Klaq51Ghmla84Aui...\"\n</code></pre>"},{"location":"APIs/Core/Client-Home%20Server%20API/#put-manage-token-generation-status","title":"PUT Manage Token Generation Status","text":"<p><code>/p2core/token/status</code></p>"},{"location":"APIs/Core/Client-Home%20Server%20API/#request_1","title":"Request","text":""},{"location":"APIs/Core/Client-Home%20Server%20API/#body_2","title":"Body","text":"Name Type Description <code>enabled</code> boolean Whether this server should accept new federation token generation requests JSON<pre><code>{\n    \"enabled\": true\n}\n</code></pre>"},{"location":"APIs/Core/Client-Home%20Server%20API/#response_1","title":"Response","text":"204 No Content"},{"location":"APIs/Core/Client-Home%20Server%20API/#body_3","title":"Body","text":"<p>This response has no body.</p>"},{"location":"APIs/Core/Client-Home%20Server%20API/#delete-federation-tokens-for-self","title":"DELETE Federation Tokens for Self","text":"<p><code>/p2core/token/@me</code></p>"},{"location":"APIs/Core/Client-Home%20Server%20API/#request_2","title":"Request","text":""},{"location":"APIs/Core/Client-Home%20Server%20API/#body_4","title":"Body","text":"<p>This request has no body.</p>"},{"location":"APIs/Core/Client-Home%20Server%20API/#response_2","title":"Response","text":"204 No Content"},{"location":"APIs/Core/Client-Home%20Server%20API/#body_5","title":"Body","text":"Type Description uint The number of deleted federation tokens. JSON<pre><code>3\n</code></pre>"},{"location":"APIs/Core/Client-Home%20Server%20API/#delete-federation-tokens-for-user","title":"DELETE Federation Tokens for User","text":"<p><code>/p2core/token/:user_id</code></p>"},{"location":"APIs/Core/Client-Home%20Server%20API/#request_3","title":"Request","text":""},{"location":"APIs/Core/Client-Home%20Server%20API/#parameters","title":"Parameters","text":"Name Type Description <code>user_id</code> Snowflake <code>user_id</code> to delete all generation tokens from."},{"location":"APIs/Core/Client-Home%20Server%20API/#body_6","title":"Body","text":"<p>This request has no body.</p>"},{"location":"APIs/Core/Client-Home%20Server%20API/#response_3","title":"Response","text":"204 No Content"},{"location":"APIs/Core/Client-Home%20Server%20API/#body_7","title":"Body","text":"<p>This response has no body.</p>"},{"location":"APIs/Core/Client-Home%20Server%20API/#delete-federation-tokens-for-everyone","title":"DELETE Federation Tokens for everyone","text":"<p><code>/p2core/token/@all</code></p>"},{"location":"APIs/Core/Client-Home%20Server%20API/#request_4","title":"Request","text":""},{"location":"APIs/Core/Client-Home%20Server%20API/#body_8","title":"Body","text":"<p>This request has no body.</p>"},{"location":"APIs/Core/Client-Home%20Server%20API/#response_4","title":"Response","text":"204 No Content"},{"location":"APIs/Core/Client-Home%20Server%20API/#body_9","title":"Body","text":"<p>This response has no body.</p>"},{"location":"APIs/Core/Client-Home%20Server%20API/#federated-identity","title":"Federated Identity","text":"<p>Client-Home Server API endpoints which are concerned with Federated Identity, managing keys, etc.</p>"},{"location":"APIs/Core/Client-Home%20Server%20API/#post-rotate-session-id-cert","title":"POST Rotate session ID-Cert","text":"<p><code>/p2core/key/user/@me</code></p> <p>Info</p> <p>This endpoint has a twin, which can be accessed by any server, not just the home server of the user. See Client-Foreign Server API/Rotate session ID-Cert for more information.</p>"},{"location":"APIs/Core/Client-Home%20Server%20API/#request_5","title":"Request","text":""},{"location":"APIs/Core/Client-Home%20Server%20API/#body_10","title":"Body","text":"Type Description String The client's public key, encoded in ASCII JSON<pre><code>\"-----BEGIN PGP PUBLIC KEY BLOCK-----\nmQINBGSDs58BEADCXP1ArorBtOvGnQdAD26gsOMasyLMqnJyUp8XXCdmTx5+gREs\nvtItmjIshHU6CLUyTwO2IqIb2Fds+AmDsdM1Qx/vM0fVtPAS13T3Tu9rknldJvvN\nGyT3urrgvZ1leqQnwvuHd3WMdtgQ29lc7F/XaP4v2RIlqUiV+bnBoe/6LL7HXTaW\nzy2oKXr/odOD4+476J5APxxXCWVLXr3qfAXmSBQERznYuuRmhyL...\n-----END PGP PUBLIC KEY BLOCK-----\"\n</code></pre>"},{"location":"APIs/Core/Client-Home%20Server%20API/#response_5","title":"Response","text":"201 Created"},{"location":"APIs/Core/Client-Home%20Server%20API/#body_11","title":"Body","text":"Type Description String The server generated ID-Cert for this public key, encoded in Base64. JSON<pre><code>\"LS0tLS1CRUdJTiBQR1AgUFVCTElDIEtFWS0tLS0tCk1JSUJqRENDQWlNQ0NRRHdFTE1Ba0dBMVVFQ2d3R2FWTnZiV0ZwYm...\"\n</code></pre>"},{"location":"APIs/Core/Client-Home%20Server%20API/#post-add-keypackage","title":"POST Add KeyPackage","text":"<p><code>/p2core/keypackage/@me</code></p>"},{"location":"APIs/Core/Client-Home%20Server%20API/#request_6","title":"Request","text":""},{"location":"APIs/Core/Client-Home%20Server%20API/#body_12","title":"Body","text":"Type Description JSON-Array of KeyPackages One or more KeyPackages to add to the available KeyPackages for this user. JSON<pre><code>[ {...}, {...} ]\n</code></pre>"},{"location":"APIs/Core/Client-Home%20Server%20API/#response_6","title":"Response","text":"201 Created"},{"location":"APIs/Core/Client-Home%20Server%20API/#body_13","title":"Body","text":"<p>This response has no body.</p>"},{"location":"APIs/Core/Client-Home%20Server%20API/#put-replace-last-resort-keypackage","title":"PUT Replace Last Resort KeyPackage","text":"<p><code>/p2core/keypackage_lr</code></p>"},{"location":"APIs/Core/Client-Home%20Server%20API/#request_7","title":"Request","text":""},{"location":"APIs/Core/Client-Home%20Server%20API/#body_14","title":"Body","text":"Type Description KeyPackage The KeyPackage to replace the current Last Resort KeyPackage with. JSON<pre><code>{...}\n</code></pre>"},{"location":"APIs/Core/Client-Home%20Server%20API/#response_7","title":"Response","text":"204 No Content"},{"location":"APIs/Core/Client-Home%20Server%20API/#body_15","title":"Body","text":"<p>This response has no body.</p>"},{"location":"APIs/Core/Client-Home%20Server%20API/#glossary","title":"Glossary","text":"<ul> <li>Client - A device or session that is used by a user or bot to connect to a server.</li> <li>Federation token - A one-time use token generated by a user's home server, which is used to authorize/identify a user on a foreign server.</li> <li>Foreign server - A polyproto-core server that a user is not registered on - essentially a third party.</li> <li>Foreign user - A user registered on a foreign server.</li> <li>Home server - The server that a user is registered on. Any polyproto-core compliant server hosted on the same domain is also considered a home server.</li> <li>Identity Key - A key pair which represents a user's identity for a given session. It is used to sign messages and to encrypt messages for the user.</li> <li>polyproto - The combination of the polyproto-core and polyproto-chat protocols and APIs.</li> <li>polyproto-chat - The chat-API used by polyproto. It defines the routes and capabilities of the chat-API used by polyproto.</li> <li>polyproto-core - The core federation protocol and APIs of polyproto, enabling identification and authorization on 'foreign' servers. It is independent of the chat-API used.</li> <li>User - An entity represented by a federation ID, registered on a home server.</li> </ul>"},{"location":"APIs/Core/WebSockets/","title":"Index","text":"<p>TODO</p>"},{"location":"APIs/Core/WebSockets/gateway/","title":"Gateway","text":"<p>TODO</p>"},{"location":"APIs/Core/WebSockets/gateway_events/","title":"Gateway Events","text":"<p>TODO</p>"},{"location":"APIs/Core/WebSockets/gateway_events/#client_key_change","title":"<code>CLIENT_KEY_CHANGE</code>","text":"<p>TODO</p>"},{"location":"APIs/Core/WebSockets/gateway_events/#server_key_change","title":"<code>SERVER_KEY_CHANGE</code>","text":"<p>TODO</p>"},{"location":"APIs/Core/WebSockets/gateway_events/#low_key_packages","title":"<code>LOW_KEY_PACKAGES</code>","text":"<p>TODO</p>"},{"location":"APIs/Core/WebSockets/gateway_events/#new_session","title":"<code>NEW_SESSION</code>","text":"<p>TODO</p>"},{"location":"Protocol%20Specifications/chat/","title":"polyproto-chat Specification","text":"<p>TODO</p> <p>TODO: This is a work in progress. Chat-related content is currently being migrated over from the polyproto-core specification.</p>"},{"location":"Protocol%20Specifications/chat/#4-federating-directgroup-messages","title":"4. Federating direct/group messages","text":""},{"location":"Protocol%20Specifications/chat/#41-direct-messages","title":"4.1 Direct messages","text":"<p>Federating direct messages is relatively simple. When Alice sends a message to Bob, their client will send the message to Bob's home server via an API request. Bob's home server will then send the message to Bob's client via an established WebSocket connection, and vice versa.</p>"},{"location":"Protocol%20Specifications/chat/#42-group-messages","title":"4.2 Group messages","text":"<p>Group messages work just like guilds, in the sense that data is stored by the home server of the group's creator, meaning that all group members will have to communicate with the group creator's home server. If the group creator leaves the group, the ownership of the group is transferred to another member. The group chat stays on the group creator's home server.</p>"},{"location":"Protocol%20Specifications/chat/#6-encrypted-channels-and-groups","title":"6. Encrypted channels and groups","text":"<p>Note, that in the below sequence diagrams, the MLS Welcome message and the MLS Group notify message are all encrypted using the identity key of the recipient.</p>"},{"location":"Protocol%20Specifications/chat/#61-encrypted-guild-channels","title":"6.1 Encrypted guild channels","text":"<p>Encrypting a guild channel is done by a client with the <code>MANAGE_CHANNEL</code> permission. Upon successfully requesting enabling encryption of a channel, all future messages in it will be encrypted. Joining an encrypted channel is done by sending a join request to the server. The server will then notify the channels' members of the join request. The members will then decide whether to accept or reject the join request. If the join request is accepted by any member, that member will initiate the MLS welcoming process. If the member finds that the join request is invalid (perhaps due to an invalid <code>KeyPackage</code>), the join request must be denied. It is imperative that join requests are verified correctly by the server.</p> <p> Text Only<pre><code>     Charlie                                        Server                                            Alice                         Bob\n     |                                              |                                                 |                             |\n     | Channel join request + KeyPackage            |                                                 |                             |\n     |---------------------------------------------&gt;|                                                 |                             |\n     |                                              |                                                 |                             |\n     |                                              | Notify group of join request                    |                             |\n     |                                              |-----------------------------------              |                             |\n     |                                              |                                  |              |                             |\n     |                                              |&lt;----------------------------------              |                             |\n     |                                              |                                                 |                             |\n     |                                              | Channel join request + Charlie's KeyPackage     |                             |\n     |                                              |------------------------------------------------&gt;|                             |\n     |                                              |                                                 |                             |\n     |                                              |                                                 | Verify Charlie's KeyPackage |\n     |                                              |                                                 |------------------------     |\n     |                                              |                                                 |                       |     |\n     |                                              |                                                 |&lt;-----------------------     |\n     |                                              |                                                 |                             |\n     |                                              |             Notify group of new member: Charlie |                             |\n     |                                              |&lt;------------------------------------------------|                             |\n     |                                              |                                                 |                             |\n     |                                              |                           Encrypted MLS Welcome |                             |\n     |                                              |&lt;------------------------------------------------|                             |\n     |                                              |                                                 |                             |\n     |                                              | Forward: Notify group of new member: Charlie    |                             |\n     |                                              |------------------------------------------------------------------------------&gt;|\n     |                                              |                                                 |                             |\n     | Forward: Notify group of new member: Charlie |                                                 |                             |\n     |&lt;---------------------------------------------|                                                 |                             |\n     |                                              |                                                 |                             |\n     |               Forward: encrypted MLS Welcome |                                                 |                             |\n     |&lt;---------------------------------------------|                                                 |                             |\n     |                                              |                                                 |                             |\n</code></pre> Fig. 3: Sequence diagram of a successful encrypted channel join in which Alice acts as a gatekeeper. The sequence diagram assumes that Alice can verify Charlies' public key to indeed belong to Charlie, and that Alice accepts the join request.</p>"},{"location":"Protocol%20Specifications/chat/#62-encrypted-direct-messages","title":"6.2 Encrypted direct messages","text":"<p>Adding another person to a direct message is not possible, and would not make much sense, as the new person cannot see any messages that were sent before they joined the group. If Alice wants to add Charlie to a direct message with Bob, she will have to create a new direct message with Bob and Charlie.</p> <p>Text Only<pre><code>Alice                                          Server                             Bob\n|                                              |                                  |\n| Request Bob's KeyPackages                    |                                  |\n|---------------------------------------------&gt;|                                  |\n|                                              |                                  |\n|                            Bob's KeyPackages |                                  |\n|&lt;---------------------------------------------|                                  |\n|                                              |                                  |\n| Verify Bob's KeyPackages                     |                                  |\n| -----------------------                      |                                  |\n|                       |                      |                                  |\n|&lt;-----------------------                      |                                  |\n|                                              |                                  |\n| Notify group of new member: Bob              |                                  |\n|---------------------------------------------&gt;|                                  |\n|                                              |                                  |\n| Encrypted MLS Welcome                        |                                  |\n|---------------------------------------------&gt;|                                  |\n|                                              |                                  |\n|                                              | Forward: New group member: Bob   |\n|                                              |---------------------------------&gt;|\n|                                              |                                  |\n|                                              | Forward encrypted MLS Welcome    |\n|                                              |---------------------------------&gt;|\n|                                              |                                  |\n</code></pre> Fig. 4: Sequence diagram of a successful encrypted direct message creation. </p>"},{"location":"Protocol%20Specifications/chat/#63-encrypted-group-messages","title":"6.3 Encrypted group messages","text":"<p>Encrypted group messages work by using the traditional MLS protocol, with the additional concept of group owners. Only group owners can add new members to the group and forcibly remove others from the group. The Group owner is determined by the Client-Server API.</p> <p>Text Only<pre><code>Alice (gatekeeper)                                 Server                                  Bob       Charlie\n|                                                  |                                       |         |\n| Request Bob's KeyPackages                        |                                       |         |\n|-------------------------------------------------&gt;|                                       |         |\n|                                                  |                                       |         |\n|                                Bob's KeyPackages |                                       |         |\n|&lt;-------------------------------------------------|                                       |         |\n|                                                  |                                       |         |\n| Verify Bob's KeyPackages                         |                                       |         |\n|------------------------                          |                                       |         |\n|                       |                          |                                       |         |\n|&lt;-----------------------                          |                                       |         |\n|                                                  |                                       |         |\n| Notify group of new member: Bob                  |                                       |         |\n|-------------------------------------------------&gt;|                                       |         |\n|                                                  |                                       |         |\n| Encrypted MLS Welcome                            |                                       |         |\n|-------------------------------------------------&gt;|                                       |         |\n|                                                  |                                       |         |\n|                                                  | Forward: New group member: Bob        |         |\n|                                                  |--------------------------------------&gt;|         |\n|                                                  |                                       |         |\n|                                                  | Forward encrypted MLS Welcome         |         |\n|                                                  |--------------------------------------&gt;|         |\n|                                                  |                                       |         |\n| Request Charlie's KeyPackages                    |                                       |         |\n|-------------------------------------------------&gt;|                                       |         |\n|                                                  |                                       |         |\n|                            Charlie's KeyPackages |                                       |         |\n|&lt;-------------------------------------------------|                                       |         |\n|                                                  |                                       |         |\n| Verify Charlie's KeyPackages                     |                                       |         |\n|----------------------------                      |                                       |         |\n|                           |                      |                                       |         |\n|&lt;---------------------------                      |                                       |         |\n|                                                  |                                       |         |\n| Notify group of new member: Charlie              |                                       |         |\n|-------------------------------------------------&gt;|                                       |         |\n|                                                  |                                       |         |\n| Encrypted MLS Welcome                            |                                       |         |\n|-------------------------------------------------&gt;|                                       |         |\n|                                                  |                                       |         |\n|                                                  | Forward: New group member: Charlie    |         |\n|                                                  |--------------------------------------&gt;|         |\n|                                                  |                                       |         |\n|                                                  | Forward: New group member: Charlie    |         |\n|                                                  |------------------------------------------------&gt;|\n|                                                  |                                       |         |\n|                                                  | Forward encrypted MLS Welcome         |         |\n|                                                  |------------------------------------------------&gt;|\n|                                                  |                                       |         |\n</code></pre> Fig. 5: Sequence diagram of a successful encrypted group creation with 3 members.</p>"},{"location":"Protocol%20Specifications/chat/#64-joining-new-devices-from-existing-users","title":"6.4 Joining new devices from existing users","text":"<p>Regardless of channel or group permissions, a user join request from a new device should be accepted by default.</p>"},{"location":"Protocol%20Specifications/chat/#65-best-practices","title":"6.5 Best practices","text":"<ul> <li>In case of encrypted guild channel join requests, it may be a good idea to treat multiple join requests from the same user with different clients as a single join request, when it comes to UI/UX.</li> <li>Joining an encrypted channel, even from an already established member with a new device, should be an event clearly visible to all members of the channel. This is to prevent a malicious user from joining a channel without the other members noticing.</li> </ul>"},{"location":"Protocol%20Specifications/chat/#glossary","title":"Glossary","text":"<ul> <li>Client - A device or session that is used by a user or bot to connect to a server.</li> <li>Federation token - A one-time use token generated by a user's home server, which is used to authorize/identify a user on a foreign server.</li> <li>Foreign server - A polyproto-core server that a user is not registered on - essentially a third party.</li> <li>Foreign user - A user registered on a foreign server.</li> <li>Home server - The server that a user is registered on. Any polyproto-core compliant server hosted on the same domain is also considered a home server.</li> <li>Identity Key - A key pair which represents a user's identity for a given session. It is used to sign messages and to encrypt messages for the user.</li> <li>polyproto - The combination of the polyproto-core and polyproto-chat protocols and APIs.</li> <li>polyproto-chat - The chat-API used by polyproto. It defines the routes and capabilities of the chat-API used by polyproto.</li> <li>polyproto-core - The core federation protocol and APIs of polyproto, enabling identification and authorization on 'foreign' servers. It is independent of the chat-API used.</li> <li>User - An entity represented by a federation ID, registered on a home server.</li> </ul> <p>The below creation- and update-times are not accurate. This is only an issue on this page. Please have a look at the commit history to view when this document was last updated.</p>"},{"location":"Protocol%20Specifications/core/","title":"polyproto-core Specification","text":"<p>v0.0.0 - Treat this as an unfinished draft. Semantic versioning v2.0.0 is used to version this specification.</p> <ul> <li>polyproto-core Specification</li> <li>1. Terminology used in this document</li> <li>2. Trust model</li> <li>3. APIs and communication protocols<ul> <li>3.1 Client-Home server API</li> <li>3.2 Client-foreign server API</li> <li>3.3 WebSockets</li> </ul> </li> <li>4. Federated Identity<ul> <li>4.1 Authentication</li> <li>4.1.1 Registering a new user on a polyproto-core home server</li> <li>4.1.2 Authenticating a new client on a polyproto-core home server</li> <li>4.1.3 Authenticating on a foreign server</li> <li>4.1.4 Using the same identity for different polyproto-core implementations</li> <li>4.2 Challenge Strings</li> <li>4.3 Abuse prevention</li> </ul> </li> <li>5. Users</li> <li>6. Encryption<ul> <li>6.1. KeyPackages</li> <li>6.1.1 Last resort KeyPackages</li> <li>6.2 Initial authentication</li> <li>6.3 Multi-device support</li> </ul> </li> <li>7. Keys and signatures<ul> <li>7.1 Home server signed certificates for public client identity keys (ID-Cert)</li> <li>7.1.1 Necessity of ID-Certs</li> <li>7.2 User identity keys and message signing</li> <li>7.2.1 Key rotation</li> <li>7.2.2 message verification</li> <li>7.4 Best practices</li> <li>7.4.1 Signing keys/ID-Certs</li> <li>7.4.2 Home server operation and design</li> </ul> </li> <li>8. Account migration<ul> <li>8.1 Migrating a user account</li> <li>8.2 Re-signing messages</li> </ul> </li> </ul> <p>The polyproto-core protocol is a home-server-based federation protocol specification intended for use in applications where a user identity is needed. polyproto-core focuses on federated identity, and apart from the usage of MLS for encryption, does not specify any application-specific features. It is intended to be used as a base for application implementations and other protocols, such as polyproto-chat, which is a chat protocol built on top of polyproto-core. Any specific polyproto-core user identity can be used for multiple applications, as long as the applications support polyproto-core. </p> <p>No part of polyproto-core is considered less important than any other part, and all parts of polyproto-core are required for a polyproto-core implementation to be considered compliant with the polyproto-core specification. The only exception to this is the encryption part of polyproto-core, which is optional, as the necessity of encryption depends on the specific implementation.</p> <p>This document is intended to be used as a starting point for developers wanting to develop software which can interoperate with other polyproto-core implementations.</p>"},{"location":"Protocol%20Specifications/core/#1-terminology-used-in-this-document","title":"1. Terminology used in this document","text":"<p>In addition to the terminology found in the glossary located at the end of this document, the following terminology is used throughout this document:</p> <ul> <li>Message, Messages: In the context of this protocol specification, a message is any piece of data sent by a client that is intended to be identifiable as being sent by a specific user. To qualify as a \"message\", this piece of data must also, at any point in time, and also if only briefly, be visible to other users and/or the unauthenticated public. Examples of things that would qualify as messages include:<ul> <li>A message sent to another user in a chat application</li> <li>A post on a social media platform</li> <li>A \"like\" interaction on a social media platform</li> <li>Reaction emojis in Discord-like chat applications</li> <li>Group join/leave messages</li> <li>Reporting a post/user, if the report is not anonymous</li> </ul> </li> </ul> <p>Terminology not specified in this section or in the glossary has been defined somewhere else in this document.</p>"},{"location":"Protocol%20Specifications/core/#2-trust-model","title":"2. Trust model","text":"<p>polyproto-core operates under the following trust assumptions:</p> <ol> <li>A user trusts their home server and its admins to keep their data safe from unauthorized access, and to not perform actions which a third party would observe to be performed by the user, without the user's consent.</li> <li>For a user to distrust their home server, something irregular must have happened, or conflicting information must have been presented to the user.</li> <li>When joining a guild on another server in the context of federation, a user trusts this server and its admins with a copy of their public profile and with all other unencrypted data sent to the server.</li> <li>Users trust the other members of an MLS encrypted communications channel with their data, as well as with the metadata attached to the data.</li> <li>Non-home servers cannot execute actions that might seem to be performed by a foreign user without that user's explicit consent; otherwise, they would be immediately exposed.</li> <li>A user relies on their home server to act as a certificate authority for their identity keys, without the home server possessing the identity itself.</li> </ol>"},{"location":"Protocol%20Specifications/core/#3-apis-and-communication-protocols","title":"3. APIs and communication protocols","text":"<p>The polyproto-core specification defines a set of APIs. These APIs are the Client-Home server and Client-Foreign server APIs.</p> <p>Aside from these REST APIs, polyproto-core also uses WebSockets for real-time communication between clients and servers.</p>"},{"location":"Protocol%20Specifications/core/#31-client-home-server-api","title":"3.1 Client-Home server API","text":"<p>The Client-Home server API of polyproto-core is concerned with authentication- and federation-related issues between a client and its' home server. A client in this context is expected to be a user/bot session.</p>"},{"location":"Protocol%20Specifications/core/#32-client-foreign-server-api","title":"3.2 Client-foreign server API","text":"<p>The Client-foreign server API of polyproto-core is used for tasks such as requesting the servers' or a users' public key(s) or migrating a user account. The definition of \"client\" in this context is broader, since it includes both users/bots and other polyproto-core servers.</p>"},{"location":"Protocol%20Specifications/core/#33-websockets","title":"3.3 WebSockets","text":"<p>WebSockets in polyproto-core are used for real-time communication between user/bot clients and servers. WebSockets are used both in Client-Home server and Client-foreign server communication.</p> <p>WebSocket connections to polyproto-core servers consist of the following cycle:</p> Text Only<pre><code>    +------------------+       1. Establish Connection        +-----------+\n    |      Client      |------------------------------------&gt; |  Gateway  |\n    +------------------+                                      +-----------+\n\n    +------------------+        2. Receive Hello Event        +-----------+\n    |      Client      |&lt;------------------------------------ |  Gateway  |\n    +------------------+                                      +-----------+\n\n                      3. Start Heartbeat Interval (continually)\n\n +-------------------------------------------------------------------------&gt;-+\n |  +------------------+       3.1 Send Heartbeat Event       +-----------+  |\n ^  |      Client      |------------------------------------&gt; |  Gateway  |  |\n |  +------------------+                                      +-----------+  |\n |                                                            |              |\n |  +------------------+    3.2 Receive Heartbeat ACK Event   +-----------+  |\n |  |      Client      |&lt;------------------------------------ |  Gateway  |  v\n |  +------------------+                                      +-----------+  |\n +-&lt;-------------------------------------------------------------------------+\n\n    +------------------+      4. Send Identify payload        +-----------+\n    |      Client      |------------------------------------&gt; |  Gateway  |\n    +------------------+                                      +-----------+\n\n    +------------------+        5. Receive Ready Event        +-----------+\n    |      Client      |&lt;------------------------------------ |  Gateway  |\n    +------------------+                                      +-----------+\n\n    +------------------+    6. Disconnect (for any reason)    +-----------+\n    |      Client      |&lt;------------------------------------ |  Gateway  |\n    +------------------+                                      +-----------+\n\n                          7. Resume connection, if eligible\n                           (otherwise: repeat from step 1)\n\n    +------------------+       7.1 Open new connection        +-----------+\n    |      Client      |------------------------------------&gt; |  Gateway  |\n    +------------------+                                      +-----------+\n\n    +------------------+        7.2 Send Resume Event         +-----------+\n    |      Client      |------------------------------------&gt; |  Gateway  |\n    +------------------+                                      +-----------+\n\n    +------------------+      7.3 Receive Missed Events       +-----------+\n    |      Client      |&lt;------------------------------------ |  Gateway  |\n    +------------------+                                      +-----------+\n\n    +------------------+      7.4 Receive Resumed Event       +-----------+\n    |      Client      |&lt;------------------------------------ |  Gateway  |\n    +------------------+                                      +-----------+\n</code></pre> <p>Fig. 1: Sequence diagram of a WebSocket connection to a polyproto-core server.</p> <p>Info</p> <p>To learn more about polyproto-core WebSockets and WebSocket Events, consult the WebSockets documentation.</p>"},{"location":"Protocol%20Specifications/core/#4-federated-identity","title":"4. Federated Identity","text":"<p>Federating user identities means that users can fully participate on foreign servers, as if it were their home server. Taking polyproto-chat as an example, this means that a polyproto-chat user can send direct messages to users from another server or join another servers' Guilds. </p> <p>An identity certificate defined in sections #7. Keys and signatures and #7.1 Home server signed certificates for public client identity keys (ID-Cert) is used to sign messages that the user sends to other servers.</p> <p>Info</p> <p>You can read more about the Identity Pubkey and Certificate in 7. Keys and signatures.</p>"},{"location":"Protocol%20Specifications/core/#41-authentication","title":"4.1 Authentication","text":""},{"location":"Protocol%20Specifications/core/#411-registering-a-new-user-on-a-polyproto-core-home-server","title":"4.1.1 Registering a new user on a polyproto-core home server","text":"<p>Registering a new user in the context of polyproto-core is done through an API route defined in the polyproto-core Client-Home server API documentation. The registration process consists of two steps:</p> <ol> <li>The client sends the home server a request containing the registration information, such as the username, password, email address, etc. The server verifies the correctness of the provided information, checks if the username is available, etc. The server then responds with an HTTP status code indicating whether the registration was successful. However, the registration process is not yet complete, and the server does not yet provide a session token or any further information to the client.</li> <li>Adding a new client to the just registered user is done by performing the same steps as authenticating a new client on a polyproto-core home server, described in section 4.1.2. If both steps are successful, the registration process is complete.</li> </ol> <p>Text Only<pre><code>Client                                               Server                                                           \n|                             |                                            \n| Registration information    |                                            \n|----------------------------&gt;|                                            \n|                             |                                            \n|                             | Verify correctness of provided information,\n|                             | check if username is available, etc. \n|                             |------------------------------------------- \n|                             |                                          | \n|                             |&lt;------------------------------------------ \n|                             | -------------------------                  \n|                             |-| Verified successfully |                  \n|                             | -------------------------                                                           \n|                             |                                            \n|                             | Verify provided CSR                        \n|                             |--------------------                        \n|                             |                   |                        \n|                             |&lt;-------------------                        \n|                             | ------------                               \n|                             |-| CSR okay |                               \n|                             | ------------                               \n|                             |                                            \n|                             | Signing CSR                                \n|                             |------------                                \n|                             |           |                                \n|                             |&lt;-----------                                \n|                             |                                            \n|        HTTP Status Code 202 |                                            \n|&lt;----------------------------|                                            \n|                             |                                            \n</code></pre> Fig. 2: Sequence diagram of a successful identity creation process.</p>"},{"location":"Protocol%20Specifications/core/#412-authenticating-a-new-client-on-a-polyproto-core-home-server","title":"4.1.2 Authenticating a new client on a polyproto-core home server","text":"<p>Whenever a user would like to access their account from a new device, they must authenticate the new session with their home server. This is done by sending the home server a request containing the authentication information, such as the username and password, and a certificate signing request (CSR) for the new client. The server verifies the correctness of the provided information and, given that the verification succeeds, signs the CSR and responds with the newly generated ID-Cert, along with a session token.</p> <p>Text Only<pre><code>Client                                               Server                                                           \n|                                                    |                                            \n| Auth information, CSR                              |                                            \n|---------------------------------------------------&gt;|                                            \n|                                                    |                                            \n|                                                    | Verify correctness of provided auth\n|                                                    | information\n|                                                    |------------------------------------------- \n|                                                    |                                          | \n|                                                    |&lt;------------------------------------------ \n|                                                    | -------------------------                  \n|                                                    |-| Verified successfully |                  \n|                                                    | -------------------------                                                           \n|                                                    |                                            \n|                                                    | Verify provided CSR                        \n|                                                    |--------------------                        \n|                                                    |                   |                        \n|                                                    |&lt;-------------------                        \n|                                                    | ------------                               \n|                                                    |-| CSR okay |                               \n|                                                    | ------------                               \n|                                                    |                                            \n|                                                    | Signing CSR                                \n|                                                    |------------                                \n|                                                    |           |                                \n|                                                    |&lt;-----------                                \n|                                                    |                                            \n|      HTTP Status Code 201, ID-Cert + Session token |                                            \n|&lt;---------------------------------------------------|                                            \n|                                                    |                                            \n</code></pre> Fig. 3: Sequence diagram of a successful client authentication process.</p> <p>The client is now authenticated and can use the session token and ID-Cert to perform actions on behalf of the user identified by the ID-Cert.</p>"},{"location":"Protocol%20Specifications/core/#413-authenticating-on-a-foreign-server","title":"4.1.3 Authenticating on a foreign server","text":"<p>Authenticating on a foreign server is similar to authenticating on a home server, with the difference being that the user must sign a challenge string with their private identity key, and send the signature to the foreign server, along with their ID-Cert. The foreign server MUST then verify the following to be true:</p> <ul> <li>The ID-Cert is valid and signed by the home server that the user claims to be from.</li> <li>The signature of the challenge string is valid and signed by the user's private identity key.</li> <li>The ID-Cert is not expired.</li> </ul> <p>If the verification is successful, the foreign server can issue a session token to the user.</p> <p>Example: Say that Alice is on server A, and would like to authenticate on Server B using her existing identity.</p> <p>Alice's client will send a request to server B, requesting a challenge string. After receiving the challenge string, Alice signs this string with their ID-Cert and sends the signature and her ID-Cert to Server B. Server B can now verify, that it was actually Alice who signed the string, and not a malicious outsider. If all goes well, server B will send a newly generated session token back to Alice's client. Alice's client can then authenticate with server B using this token. Text Only<pre><code>Alice's Client                                  Server A              Server B\n|                                               |                     |\n| Challenge string request                      |                     |\n|----------------------------------------------&gt;|                     |\n|                                               |                     |\n|                              Challenge string |                     |\n|&lt;----------------------------------------------|                     |\n|                                               |                     |        \n|                                               |                     |\n| Signed challenge, ID-Cert                     |                     |\n|--------------------------------------------------------------------&gt;|\n|                                               |                     |\n|                                               |          Get pubkey |\n|                                               |&lt;--------------------|\n|                                               |                     |\n|                                               | Server A Pubkey     |\n|                                               |--------------------&gt;|\n|                                               |                     |\n|                                               |                     |\n|                                               |                     |\n|                                               |                     |\n|                                               |                     |\n|                                               |                     |\n|                                               |       Session Token |\n|&lt;--------------------------------------------------------------------|\n|                                               |                     |\n</code></pre> Fig. 4: Sequence diagram of a successful identity verification.</p> <p>If Alice's session token expires, she can repeat this process of requesting a challenge string and, together with her ID-Cert, exchange it for a session token. However, if Alice wants to access this third party account from a completely new device, they will have to perform the steps described in section 4.1.2 to obtain a valid ID-Cert for that session.</p>"},{"location":"Protocol%20Specifications/core/#414-using-the-same-identity-for-different-polyproto-core-implementations","title":"4.1.4 Using the same identity for different polyproto-core implementations","text":"<p>A user may choose to use the same identity for multiple polyproto-core implementations. The additional behavior required by polyproto-core server implementations is really simple, as the server only needs to verify the ID-Cert of the user. To verify the ID-Cert, the server can simply request the other servers' public identity key and then verify the signature of the ID-Cert with the public identity key of the other server.</p>"},{"location":"Protocol%20Specifications/core/#42-challenge-strings","title":"4.2 Challenge Strings","text":"<p>Challenge strings are generated by servers. They are a random, unique string of characters, which is used to verify that the user is in possession of their private identity key. The string is signed by the user's private identity key, and the signature is sent to the server, along with the user's ID-Cert. By verifying the signature of the challenge string with the user's ID-Cert, the server can verify that the user is in possession of their private identity key, and is who they claim to be.</p> <p>The usage of challenge strings prevents replay attacks, as the challenge string is unique, meaning that it is different even for two identical requests. This means that a malicious server cannot simply replay a request to another server, as the signature of the challenge string would be different.</p>"},{"location":"Protocol%20Specifications/core/#43-abuse-prevention","title":"4.3 Abuse prevention","text":"<p>To protect users from malicious home servers secretly acting on the behalf of non-consenting users, a mechanism is needed to prevent home servers from generating federation tokens for users without their consent.</p> <p>Potential abuse scenario</p> <p>A malicious home server can potentially request a federation token on behalf of one of its users, and use it to generate a session token on the user's behalf. This is a problem, as the malicious server can then impersonate the user on another server, as well as read unencrypted data (such as messages, in the context of a chat application) sent on the other server.</p> <p>Abstract</p> <p>The above scenario is not unique to polyproto-core, and rather a problem other federated services/ protocols, like ActivityPub, have as well. There is no real solution to this problem, but it can be mitigated a bit by making it more difficult for malicious home servers to do something like this without the user noticing.</p> <p>Polyproto servers MUST notify users, when a new session token is generated for them. This would make the malicious home server's actions more noticeable to the user. However, this does not address the issue of the malicious home server being able to generate a federation token for a server which you are not yet connected to, as the user would have no way to receive the notification of a  session token being created for them, if they are not connected to that server. Clients re-connecting to a server after being offline MUST be notified of any new session tokens that were generated for them while they were offline. This <code>NEW_SESSION</code> gateway event MUST be sent to all sessions, except for the new session. The information stored in a <code>NEW_SESSION</code> event can be found in the Gateway Events documentation.</p> <p>Note</p> <p>With proper safety precautions and strong encryption, it is extremely unlikely for a malicious server to be able to listen in on encrypted conversations, without all users in that  conversation noticing. MLS's forward secrecy guarantees ensure that, in theory, a malicious session cannot decrypt any messages sent before its' join epoch. If secrecy or confidentiality are of concern, users should host their own home server and use end-to-end encryption.</p>"},{"location":"Protocol%20Specifications/core/#5-users","title":"5. Users","text":"<p>Each client must have a user identity associated with it. A user is identified by a unique federation ID (FID), which consists of the user's username (which must be unique on the instance) and the instance's root domain. A FID is formatted as follows: <code>user@optionalsubdomain.domain.tld</code>, which makes for a globally unique user ID. Federation IDs are case-insensitive.</p> <p>The following regex can be used to validate user IDs: <code>\\b([A-Z0-9._%+-]+)@([A-Z0-9.-]+\\.[A-Z]{2,})\\b</code>.</p> <p>Note</p> <p>Validating a federation ID with the above regex does not guarantee that the ID is valid. It only indicates that the federation ID is formatted correctly.</p>"},{"location":"Protocol%20Specifications/core/#6-encryption","title":"6. Encryption","text":"<p>About MLS</p> <p>Polyproto offers end-to-end encryption for messages via Message Layer Security (MLS). polyproto-core compliant servers take on the role of both an Authentication Service and a Delivery Service in the context of MLS.</p> <p>MLS is a cryptographic protocol that provides confidentiality, integrity, and authenticity guarantees for group messaging applications. It builds on top of the Double Ratchet Algorithm and X3DH to provide these security guarantees.</p> <p>Implementations of polyproto-core may opt to support encryption to secure communication channels. The selected security protocol for all polyproto-core implementations is the Messaging Layer Security protocol, provided that MLS can feasibly be integrated within the context of the given implementation. The MLS protocol has a built-in ability to negotiate protocol versions, cipher suites, extensions, credential types, and additional proposal types. For two implementations of polyproto-core to be compatible with each other in the context of encryption, they must have overlapping capabilities in these areas.</p> <p>The following sections explain the additional behavior that polyproto-core implementations utilizing MLS must implement.</p>"},{"location":"Protocol%20Specifications/core/#61-keypackages","title":"6.1. KeyPackages","text":"<p>Warning</p> <p>The sections 6.1 and 6.1.1 are not exhaustive and do not cover all aspects of MLS and KeyPackages. They exist solely to give a general overview of how KeyPackages are used in polyproto-core. Please read and understand the MLS specification (RFC9420) to implement polyproto-core correctly.</p> <p>A polyproto-core compliant server must store KeyPackages for all users that are registered on the server. The <code>KeyPackage</code> is a JSON object that contains the following information:</p> JSON<pre><code>{\n  \"protocol_version\": \"&lt;Version&gt;\",\n  \"cipher_suite\": \"&lt;CipherSuite&gt;\",\n  \"init_key\": \"&lt;HPKEPublicKey&gt;\",\n  \"leaf_node\": \"&lt;LeafNode&gt;\",\n  \"extensions\": \"&lt;Extensions&gt;\",\n}\n</code></pre> <ul> <li><code>protocol_version</code> is the version of the MLS protocol the <code>KeyPackage</code> is using.</li> <li><code>cipher_suite</code> is the cipher suite that this KeyPackage is using. Note that a client may store multiple KeyPackages for a single user, to support multiple cipher suites.</li> <li><code>init_key</code> is a public key that is used to encrypt the group's initial secrets.</li> <li><code>leaf_node</code> is a signed <code>LeafNodeTBS</code> struct as defined in section <code>7.2. Leaf Node Contents</code> in RFC9420. A <code>LeafNode</code> contains information representing a users' identity, in the form of the users' ID-Cert for a given session/client. The <code>LeafNodeTBS</code> is signed using the user's private identity key.</li> <li><code>extensions</code> can be used to add additional information to the protocol, as defined in section <code>13. Extensibility</code> in RFC9420.</li> </ul> <p>A <code>KeyPackage</code> is supposed to be used only once. Servers must ensure the following things: -  That any <code>KeyPackage</code> is not given out to clients more than once. -  That the <code>init_key</code> values of all <code>KeyPackages</code> are unique, as the <code>init_key</code> is what makes the <code>KeyPackage</code> one-time use. -  That the contents of the <code>LeafNode</code> as well as the <code>init_key</code> were signed by the user who submitted the <code>KeyPackage</code>.</p> <p>Because <code>KeyPackages</code> are supposed to be used only once, it is recommended that servers store multiple valid <code>KeyPackages</code> for each user. A server must notify a client when it is running low on <code>KeyPackages</code> for a user. Consult the Client-Server-API for more information on how servers should request new <code>KeyPackages</code> from clients. Servers should delete a <code>KeyPackage</code> when it is no longer valid.</p> <p>Servers only store <code>KeyPackages</code> for home server users, i.e. not for foreign users.</p> <p>About keys</p> <p>It is recommended that keys are to be generated using the <code>EdDSA</code> signature scheme, however, other signature schemes may be used as well.</p>"},{"location":"Protocol%20Specifications/core/#611-last-resort-keypackages","title":"6.1.1 Last resort KeyPackages","text":"<p>A \"last resort\" <code>KeyPackage</code> is a <code>KeyPackage</code> which can be used multiple times. Such <code>KeyPackages</code> are only to be given out to clients when a server has no more valid, regular <code>KeyPackages</code> available for a user. This is to prevent DoS attacks, where a malicious client could request a large amount of <code>KeyPackages</code> for a user, causing other users not being able to adding the attacked user to an encrypted group or guild channel.</p> <p>Once a server has given out a \"last resort\" <code>KeyPackage</code> to a client, the server should request a new \"last resort\" <code>KeyPackage</code> from the client from the user, once they connect to the server again. The old \"last resort\" <code>KeyPackage</code> should then be deleted.</p>"},{"location":"Protocol%20Specifications/core/#62-initial-authentication","title":"6.2 Initial authentication","text":"<p>During the initial authentication process, a client must provide at least one <code>KeyPackage</code>, as well as one \"last resort\" <code>KeyPackage</code> to the server, in addition to the required registration information.</p> <p>The public identity key inside the <code>LeafNode</code> of this <code>KeyPackage</code> is signed using the home servers' private key, so that home servers act as a certificate authority for their users' keys.</p>"},{"location":"Protocol%20Specifications/core/#63-multi-device-support","title":"6.3 Multi-device support","text":"<p>polyproto-core servers and clients using encryption should implement multi-device support, as defined in the MLS specification (RFC9420). Clients must not use the same keys on multiple devices. Instead, the MLS protocol assigns a new <code>LeafNode</code> to each device.</p> <p>Each device provides its own <code>KeyPackages</code> as well as an own identity key. </p>"},{"location":"Protocol%20Specifications/core/#7-keys-and-signatures","title":"7. Keys and signatures","text":""},{"location":"Protocol%20Specifications/core/#71-home-server-signed-certificates-for-public-client-identity-keys-id-cert","title":"7.1 Home server signed certificates for public client identity keys (ID-Cert)","text":"<p>The home server signed public client identity key certificate, ID-Cert for short, is a public key certificate used to prove the validity of a public identity key. The ID-Cert is a user generated public identity key certificate signing request (CSR), signed by a user's home server, and includes information about the user's identity, as well as the public identity key of the user. Clients can receive an ID-Cert in exchange for a CSR.</p> <p>A CSR includes the following information: - The public identity key of the client. - The federation ID of the user associated with the client. - The session ID of the client. The session ID is a unique identifier for a session, which does not change when a client rotates their identity keys. - Optionally, an expiry date for the certificate. This expiry date must be less than or equal to the expiry date of the home servers' public identity key certificate.</p> <p>The resulting ID-Cert contains the following information, in addition to the information supplied through the CSR: - Issuer information: The home servers' domain. - Serial number: A unique identifier for the certificate. - Signature algorithm: The algorithm used to sign the certificate. - Signature: The signature of the certificate, generated using the home servers' private identity key. - Expiry date: The expiry date of the certificate.</p> <p>Text Only<pre><code>                                                 Server                                                Client                           \n                                                 |                                                     |                                 \n                                                 |                                                     | Create CSR for own identity key \n                                                 |                                                     |-------------------------------- \n                                                 |                                                     |                               | \n                                                 |                                                     |&lt;------------------------------- \n                                                 |                                                     |                                 \n                                                 |      Request key rotation/CSR signing, CSR attached |                                 \n                                                 |&lt;----------------------------------------------------|                                 \n                                                 |                                                     |                                 \n                                                 | Verify validity of claims presented in the CSR      |                                 \n                                                 |-----------------------------------------------      |                                 \n                                                 |                                              |      |                                 \n                                                 |&lt;----------------------------------------------      |                                 \n                                                 |                                                     |                                 \n                                                 | Create ID-Cert for Client                           |                                 \n                                                 |--------------------------                           |                                 \n                                                 |                         |                           |                                 \n                                                 |&lt;-------------------------                           |                                 \n                                                 |                                                     |                                 \n                                                 | Respond with ID-Cert                                |                                 \n                                                 |----------------------------------------------------&gt;|                                 \n------------------------------------------------ |                                                     |                                 \n| Send CLIENT_KEY_CHANGE to associated clients |-|                                                     |                                 \n------------------------------------------------ |                                                     |                                 \n                                                 |                                                     |                                 \n</code></pre> Fig. 5: Sequence diagram depicting the process of a client using a CSR to request a new ID-Cert from their home server.</p> <p>Info</p> <p>See 7.2.1 for more information on what an \"associated client\" is.</p>"},{"location":"Protocol%20Specifications/core/#711-necessity-of-id-certs","title":"7.1.1 Necessity of ID-Certs","text":"<p>The addition of a certificate may seem ubiquitous, but it is necessary to prevent a malicious foreign server from abusing public identity key caching to impersonate a user. Consider the following example which employs foreign server public identity key caching, but no home server issued identity key certificates:</p> <p>Potential abuse scenario</p> <p>A malicious foreign server B can fake a message from Alice (Home server: Server A) to Bob (Home Server: Server B), by generating a new identity key pair and using it to sign the malicious message. The foreign server then sends that message to Bob, who will then request Alice's public identity key from Server B, who will then send Bob the malicious public identity key. Bob will succeed in verifying the signature of the message, and not notice that the message is malicious.</p> <p>The above scenario is not possible with home server issued identity key certificates, as the malicious server cannot generate an identity key pair for Alice which is signed by Server A.</p> <p>Should the expected lifetime of a servers' identity key come to an early end, perhaps due to being leaked and therefore needing to be rotated, the server should generate a new identity key pair + ID-Cert and send a <code>SERVER_KEY_CHANGE</code> gateway event, as well as a <code>LOW_KEY_PACKAGES</code> event to all clients. The clients should then also re-generate their identity keys and request a new ID-Cert from the server (via sending a CSR), as well as respond to the <code>LOW_KEY_PACKAGES</code> event correctly.</p> <p>Note</p> <p>A <code>LOW_KEY_PACKAGES</code> event is only sent by servers which use MLS encryption. Server/Clients not using MLS encryption can safely ignore this event.</p>"},{"location":"Protocol%20Specifications/core/#72-user-identity-keys-and-message-signing","title":"7.2 User identity keys and message signing","text":"<p>As briefly mentioned section #4, users must hold on to an identity key pair at all times. This key pair is used to represent a user's identity and to verify message integrity, by having a user sign all messages they send with their private identity key. The key pair is generated by the user, and a user-generated identity key certificate signing request (CSR) is sent to the user's home server when first connecting to the server with a new client, or when rotating keys. The key is stored in the client's local storage. Upon receiving a new identity key CSR, a home server will sign this CSR and send the resulting public key certificate to the client. This certificate is proof that the home server attests to the clients key. Read section 7.3 for more information on the certificate.</p>"},{"location":"Protocol%20Specifications/core/#721-key-rotation","title":"7.2.1 Key rotation","text":"<p>A client may choose to rotate their identity key at any time. This is done by generating a new identity key pair, and sending the new public identity key to their home server, as part of a new Certificate Signing Request, at least one new <code>KeyPackage</code> and one corresponding 'last resort' <code>KeyPackage</code>. The home server will then generate the new ID-Cert, send it to the client, and let all associated clients know, that this clients' public identity key has changed. The server does this by sending a <code>CLIENT_KEY_CHANGE</code> gateway event to those clients. For example, in the context of a chat application built with polyproto-chat, an associating relationship between two clients exists, if the two clients share a guild, a group or a direct message channel, if they are friends, or if they have a pending friend request between each other.</p> <p>Before sending any messages to a server, a client that performed a key rotation should inform the server of that change, to ensure that the server has the correct ID-Cert cached for the client.</p> <p>Home servers must keep track of the ID-Certs of all users (and their clients) registered on them, and must be able to provide a clients' ID-Cert for a given timestamp on request. This is to ensure messages sent by users, even ones sent a long time ago, can be verified by other servers and their users. This is because the public key of a user may change over time and users must sign all messages they send to servers. Likewise, a client should also keep all of its own ID-Certs stored perpetually, to potentially verify its identity in case of a migration.</p> <p>Signing messages prevents a malicious foreign server from impersonating a user.</p>"},{"location":"Protocol%20Specifications/core/#722-message-verification","title":"7.2.2 message verification","text":"<p>Of course, in order for message signing to actually verify message integrity, clients must verify the signatures of all messages they receive. This is done by verifying the signature of the message with the ID-Cert of the sender and the ID-Cert of the senders' home server. Clients must also verify that the certificate attached to the message is valid and that the public key in the certificate matches the public key of the sender. </p> <p>Example: Given a signed message from Alice, like Bob would receive it from Server B in Fig. 3, Bob's client would verify the signature of the message like so:</p> <p>Text Only<pre><code>Server B                                        Bob                                         Server A\n|                                               |                                           |\n| Alice's signed message                        |                                           |\n|----------------------------------------------&gt;|                                           |\n|                                               |                                           |\n|                       Request Alice's ID-Cert |                                           |\n|&lt;----------------------------------------------|                                           |\n|                                               |                                           |\n| Alice's ID-Cert                               |                                           |\n|----------------------------------------------&gt;|                                           |\n|                                               |                                           |\n|                                               | Request Server A ID-Cert                  |\n|                                               |------------------------------------------&gt;|\n|                                               |                                           |\n|                                               |                          Server A ID-Cert |\n|                                               |&lt;------------------------------------------|\n|                                               |                                           |\n|                                               | Verify signature of Alice's message       |\n|                                               |------------------------------------       |\n|                                               |                                   |       |\n|                                               |&lt;-----------------------------------       |\n|                                               |                                           |\n</code></pre> Fig. 6: Sequence diagram of a successful message signature verification.</p> <p>Bob's client may now choose to cache Server A's public identity key and Alice's ID-Cert, so that it does not have to request them again in the future, as long as the ID-Cert/Server public key do not change and are not expired. If Bob's client receives another message from Alice, it can now verify the signature of the message with the cached ID-Certs.</p> <p>If the verification fails, Bob's client should try to re-request the key from Server B first. Should the verification fail again, Bob's client may try to request Alice's public identity key and certificate from Server A (Alice's home server), and try to verify the signature again. Should the verification still not succeed, the message should be treated with extreme caution.</p> <p>Why does Bob's client not request Alice's public identity key from Server A?</p> <p>Bob's client could request Alice's public identity key from Server A, instead of Server B. However, this is discouraged, as it</p> <ul> <li>Generates unnecessary load on Server A; Doing it this way distributes the load of public identity key more fairly, as the server that the message was sent on is the one that has to process the public identity key request.</li> <li>Would expose unnecessary metadata to Server A; Server A does not need to know who exactly Alice is talking to, and when. Only Server B, Alice and Bob need to know this information. Always requesting the public identity key from Server A might expose this information to Server A.</li> </ul> <p>Clients should only use Server A as a fallback for public identity key verification, if Server B does not respond to the request for Alice's public identity key, or if the verification fails with the public identity key from Server B.</p> <p>Info</p> <p>A failed signature verification does not always mean that the message is invalid. It may be that the user's identity key has changed, and that Server B has not yet received the new public identity key for some reason.</p>"},{"location":"Protocol%20Specifications/core/#74-best-practices","title":"7.4 Best practices","text":""},{"location":"Protocol%20Specifications/core/#741-signing-keysid-certs","title":"7.4.1 Signing keys/ID-Certs","text":"<ul> <li>Instance/user signing keys should be rotated regularly (every 3-6 months). This is to ensure that a compromised key can only be used for a limited amount of time.</li> <li>When a server is asked to generate a new ID-Cert for a user, it must make sure that the CSR is valid and, if set, has an expiry date which is less than or equal to the expiry date of the server's own ID-Cert.</li> <li>Due to the fact that a <code>SERVER_KEY_CHANGE</code> gateway event is bound to generate a lot of traffic, servers should only manually generate a new identity key pair when absolutely necessary and instead choose a fitting expiry date interval for their identity key certificates. It might also be a good idea to stagger the sending of <code>SERVER_KEY_CHANGE</code> gateway events, to prevent a server from initiating a DDoS attack on itself.</li> <li>When a client or server receives the information that a user clients' identity key has been changed, the client/server in question should update their cached ID-Cert for the user in question, taking into account the session ID of the new identity key pair.</li> </ul>"},{"location":"Protocol%20Specifications/core/#742-home-server-operation-and-design","title":"7.4.2 Home server operation and design","text":"<ul> <li>Employ a caching layer for your home server to handle the potentially large amount of requests for public key certificates without putting unnecessary strain on the database.</li> </ul>"},{"location":"Protocol%20Specifications/core/#8-account-migration","title":"8. Account migration","text":"<p>Account migration allows users to move their account and associated data to another identity. This allows users to switch home servers while not losing ownership of messages sent by them.</p> <p>Migrating an account is done with the following steps:</p> <ol> <li>The user creates a new account on a new home server.</li> <li>The user requests the migration from the new home server, specifying the old account's    federation ID.</li> <li>The old user account confirms the migration request by sending a signed API request to the new home    server. The confirmation contains the federation ID of the new account.</li> <li>The new server sends this information to the old server, which then sends the new server all    information associated with the old account.     The old server now forward requests regarding the old account to the new server.    Alternatively, if the old server is shut down, the new server can request the information    from the old user directly.</li> <li>The old account can now request the resigning of its messages, transferring ownership of the    messages to the new account. To have all messages from a server re-signed, a user must    prove that they are the owner of the private keys used to sign the messages.</li> </ol>"},{"location":"Protocol%20Specifications/core/#81-migrating-a-user-account","title":"8.1 Migrating a user account","text":"<p>Text Only<pre><code>Server A                               Alice A                                                Server B                                            Alice B \n|                                      |                                                      |                                                   |\n|                                      |                                                      |      Migration Request (Signed, Alice A-&gt;Alice B) |\n|                                      |                                                      |&lt;--------------------------------------------------|\n|                                      |                                                      |                                                   |\n|                                      | Migration Request (Signed, Alice A-&gt;Alice B)         |                                                   |\n|                                      |-----------------------------------------------------&gt;|                                                   |\n|                                      |                                                      |                                                   |\n|       Fetch full profile of Alice A (Attached: Migration Request, Signed, Alice A-&gt;Alice B) |                                                   |\n|&lt;--------------------------------------------------------------------------------------------|                                                   |\n|                                      |                                                      |                                                   |\n| Verify Signed Migration Request      |                                                      |                                                   |\n|--------------------------------      |                                                      |                                                   |\n|                               |      |                                                      |                                                   |\n|&lt;-------------------------------      |                                                      |                                                   |\n|                                      |                                                      |                                                   |\n| Full profile of Alice A              |                                                      |                                                   |\n|--------------------------------------------------------------------------------------------&gt;|                                                   |\n|                                      |                                                      |                                                   |\n|                                      |                                                      | Verify, replace Alice B profile with Alice A      |\n|                                      |                                                      |---------------------------------------------      |\n|                                      |                                                      |                                            |      |\n|                                      |                                                      |&lt;--------------------------------------------      |\n|                                      |                                                      |                                                   |\n|                                      |                                                      | New account data                                  |\n|                                      |                                                      |--------------------------------------------------&gt;|\n|                                      |                                                      |                                                   |\n| Deactivate Alice A's account         |                                                      |                                                   |\n|-----------------------------         |                                                      |                                                   |\n|                            |         |                                                      |                                                   |\n|&lt;----------------------------         |                                                      |                                                   |\n|                                      |                                                      |                                                   |\n| Set up redirect from Alice A to Alice B                                                     |                                                   |\n|--------------------------------------------------------------------------------------------&gt;|                                                   |\n|                                      |                                                      |                                                   |\n</code></pre> Fig. 7: Sequence diagram depicting a successful migration of Alice A's account to Alice B's account, where Server A is reachable and cooperative.</p> <p>Alternatively, if Server A is offline or deemed uncooperative, the following sequence diagram depicts how the migration can be done without Server A's cooperation:</p> <p>Text Only<pre><code>Server A     Alice A                                                                          Server B                                            Alice B \n|            |                                                                                |                                                   |\n|            |                                                                                |      Migration Request (Signed, Alice A-&gt;Alice B) |\n|            |                                                                                |&lt;--------------------------------------------------|\n|            |                                                                                |                                                   |\n|            | Migration Request (Signed, Alice A-&gt;Alice B)                                   |                                                   |\n|            |-------------------------------------------------------------------------------&gt;|                                                   |\n|            |                                                                                |                                                   |\n|       Fetch full profile of Alice A (Attached: Migration Request, Signed, Alice A-&gt;Alice B) |                                                   |\n|&lt;--------------------------------------------------------------------------------------------|                                                   |\n|            |                                                                                |                                                   |\n|            |                                                                                | Wait for response...                              |\n|            |                                                                                |---------------------                              |\n|            |                                                                                |                    |                              |\n|            |                                                                                |&lt;--------------------                              |\n|            |                                                                                |                                                   |\n|            |                       Server A offline/not cooperative, send profile or abort? |                                                   |\n|            |&lt;-------------------------------------------------------------------------------|                                                   |\n|            |                                                                                |                                                   |\n|            | Full profile of Self                                                           |                                                   |\n|            |-------------------------------------------------------------------------------&gt;|                                                   |\n|            |                                                                                |                                                   |\n|            |                                                                                | Verify, replace Alice B profile with Alice A      |\n|            |                                                                                |---------------------------------------------      |\n|            |                                                                                |                                            |      |\n|            |                                                                                |&lt;--------------------------------------------      |\n|            |                                                                                |                                                   |\n|            |                                                                                | New account data                                  |\n|            |                                                                                |--------------------------------------------------&gt;|\n|            |                                                                                |                                                   |\n</code></pre> Fig. 8: Sequence diagram depicting a successful migration of Alice A's account to Alice B's account, where Server A is unreachable or uncooperative.</p> <p>If the old home server is not needed for the migration, why try to contact it in the first place?</p> <p>It is generally preferrable to have the old home server cooperate with the migration, as it allows for a more seamless migration. A cooperative homeserver will be able to provide the new home server with all information associated with the old account. It can also forward requests regarding the old account to the new server, which makes the process more seamless for other users. The \"non-cooperative homeserver migration method\" is only a last resort.</p>"},{"location":"Protocol%20Specifications/core/#82-re-signing-messages","title":"8.2 Re-signing messages","text":"<p>Re-signing messages is the process of transferring ownership of messages from an old account to the new, migrated account. The process requires some coordination between the new and old accounts,  and can only be initiated by the old account. </p> <p>To initiate the process, the old account must send an API request to the server where messages should be re-signed. The request must contain the federation ID of the new account. The server will  then respond with a list of all keys that were used to sign messages sent by the old account. The old account will then need to prove that it is in possession of the private keys that were used to sign the messages. This is done by signing a challenge string with the private keys. The server will then verify the signature, and, if the verification is successful, grant the new account the ability to re-sign all messages sent by the old account which were signed with the provided keys.</p> <p>Re-signing messages mustn't overwrite the old signature. Instead, a new variant of the message must be created, which contains the new signature.</p> <p>Text Only<pre><code>Alice A                                              Server C                                                              Alice B                                                 \n|                                                    |                                                                     |                                                     \n| Request allow message re-signing for Alice B       |                                                                     |                                                     \n|---------------------------------------------------&gt;|                                                                     |                                                     \n|                                                    |                                                                     |                                                     \n|          List of keys to verify + challenge string |                                                                     |                                                     \n|&lt;---------------------------------------------------|                                                                     |                                                     \n|                                                    |                                                                     |                                                     \n| Completed challenge for each key on the list       |                                                                     |                                                     \n|---------------------------------------------------&gt;|                                                                     |                                                     \n|                                                    |                                                                     |                                                     \n|                                                    | Verify challenge, unlock re-signing for Alice B                     |                                                     \n|                                                    |------------------------------------------------                     |                                                     \n|                                                    |                                               |                     |                                                     \n|                                                    |&lt;-----------------------------------------------                     |                                                     \n|                                                    |                                                                     |                                                     \n|                                                    |                   Request message re-signing for Alice A's messages |                                                     \n|                                                    |&lt;--------------------------------------------------------------------|                                                     \n|                                                    |                                                                     |                                                     \n|                                                    | List of old messages (including old signatures + certificates)      |                                                     \n|                                                    |--------------------------------------------------------------------&gt;|                                                     \n|                                                    |                                                                     |                                                     \n|                                                    |                                                                     | Verify that Server C has not tampered with messages \n|                                                    |                                                                     |---------------------------------------------------- \n|                                                    |                                                                     |                                                   | \n|                                                    |                                                                     |&lt;--------------------------------------------------- \n|                                                    |                                                                     |                                                     \n|                                                    |                                                                     | Re-sign messages with own keys                      \n|                                                    |                                                                     |-------------------------------                      \n|                                                    |                                                                     |                              |                      \n|                                                    |                                                                     |&lt;------------------------------                      \n|                                                    |                                                                     |                                                     \n|                                                    |                                                        New messages |                                                     \n|                                                    |&lt;--------------------------------------------------------------------|                                                     \n|                                                    |                                                                     |                                                     \n|                                                    | Verify that only FID and signature related fields have changed      |                                                     \n|                                                    |---------------------------------------------------------------      |                                                     \n|                                                    |                                                              |      |                                                     \n|                                                    |&lt;--------------------------------------------------------------      |                                                     \n|                                                    |                                                                     |                                                     \n</code></pre> Fig. 9: Sequence diagram depicting the re-signing procedure.</p>"},{"location":"Protocol%20Specifications/core/#glossary","title":"Glossary","text":"<ul> <li>Client - A device or session that is used by a user or bot to connect to a server.</li> <li>Federation token - A one-time use token generated by a user's home server, which is used to authorize/identify a user on a foreign server.</li> <li>Foreign server - A polyproto-core server that a user is not registered on - essentially a third party.</li> <li>Foreign user - A user registered on a foreign server.</li> <li>Home server - The server that a user is registered on. Any polyproto-core compliant server hosted on the same domain is also considered a home server.</li> <li>Identity Key - A key pair which represents a user's identity for a given session. It is used to sign messages and to encrypt messages for the user.</li> <li>polyproto - The combination of the polyproto-core and polyproto-chat protocols and APIs.</li> <li>polyproto-chat - The chat-API used by polyproto. It defines the routes and capabilities of the chat-API used by polyproto.</li> <li>polyproto-core - The core federation protocol and APIs of polyproto, enabling identification and authorization on 'foreign' servers. It is independent of the chat-API used.</li> <li>User - An entity represented by a federation ID, registered on a home server.</li> </ul> <p>The below creation- and update-times are not accurate. This is only an issue on this page. Please have a look at the commit history to view when this document was last updated.</p>"}]}